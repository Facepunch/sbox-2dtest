@using System
@using Sandbox;
@using Sandbox.UI;
@attribute [StyleSheet]
@inherits RootPanel
@namespace GameMenu
@implements Sandbox.Menu.IGameMenuPanel

<root class="mygamemenu">

    <div class="title">Sausage Survivors</div>

    <div class="options">

        @if ( Game.InGame )
        {
            <div class="row">
                <div class="option" onclick="@(() => Game.Menu.HideMenu() )">Return To Game</div>
            </div>

            <div class="row">
                <div class="option" onclick="@(() => Game.Menu.LeaveServer( "End Game" ) )">End Game</div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="option" onclick="@CreateNewGame">Create Game</div>
            </div>

            <div class="row">
                <div class="option" onclick="@OpenServerList">Join Game</div>
            </div>
        }

        <div class="row spacer">
            <div class="option"></div>
        </div>

        <div class="row">
            <div class="option" onclick="@Game.Menu.Close">Quit</div>
        </div>  
        
    </div>

    <div class="leaderboards">

        @{
            var stat = Sandbox.Services.Stats.Global.Get( "kills" );
            <h1><VelocityNumber Value="@stat.Value" Velocity="@stat.Velocity" /></h1>
        }
        
        <h2>Zombies Killed</h2>

        <LeaderboardPanel BoardName="kills" Group="global"></LeaderboardPanel>
        <LeaderboardPanel BoardName="kills" Group="country"></LeaderboardPanel>
        <LeaderboardPanel BoardName="kills" Group="friends"></LeaderboardPanel>

    </div>

</root>

@code
{
    protected override async Task OnParametersSetAsync()
    {

    }

    public override void Tick()
    {
        base.Tick();

        SetClass( "ingame", Game.InGame );

        UpdateMusic();
    }

    SoundHandle MenuMusic;

    void UpdateMusic()
    {
        if (Game.InGame)
        {
            MenuMusic.Stop(true);
            return;
        }

        if (!MenuMusic.IsPlaying)
        {
            MenuMusic = Audio.Play("menu/menumusic.sound");
        }
    }

    void CreateNewGame()
    {
        var options = new Sandbox.Modals.GameCreateModalOptions();
        options.Cookie = $"sausagesurvivors.serverconfig";
        options.ModalTitle = "Create Game";
        options.MinPlayers = 1;
        options.MaxPlayers = 4;
        options.MapSelection = false;
        options.Default.GameTitle = $"{Game.UserName}'s Sausage Survival";

        options.OnStartGame = (setup) =>
        {
            Game.Menu.StartServerAsync( setup.MaxPlayers, setup.GameTitle, "<empty>" );
        };

        Game.Overlay.ShowCreateGame(options);
    }

    void OpenServerList()
    {
        var options = new Sandbox.Modals.ServerListModalOptions();
        options.ModalTitle = "Sausages Surviving";
        options.TargetGame = "facepunch.sausagesurvivors";
        options.OnSelected = (server) =>
        {
            Game.Menu.ConnectToServer(server.SteamId);
        };

        Game.Overlay.ShowServerList( options );
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( Game.InGame );
    }


}
